{"version":3,"sources":["cryptomonedas.png","hooks/useMoneda.jsx","hooks/useCriptomoneda.jsx","components/Error.jsx","components/Formulario.jsx","components/Cotizacion.jsx","components/Spinner.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","key","map","opcion","codigo","nombre","useCriptomoneda","CoinInfo","Id","Name","FullName","MensajeError","p","Error","mensaje","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","guardarCotizacion","criptomonedas","setCriptomonedas","moneda","SelectMoneda","criptomoneda","SelectCriptomoneda","error","guardarError","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","trim","type","ResultadoDiv","div","Info","Precio","Cotizacion","cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Contenedor","Imagen","img","Heading","h1","App","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c94444f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, { Fragment, useState } from 'react'\nimport styled from '@emotion/styled'\n\n\nconst Label = styled.label`\n    font-family: 'Bebas neue', cursive;\n    color: #FFF;\n    text-transform: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display:block;\n`\n\nconst Select = styled.select`\n    width: 100%;\n    display:block;\n    padding: 1rem;\n    -webkit-appearence: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.8rem;\n`\n\nconst useMoneda = (label, stateInicial, opciones) => {\n\n    //State de nuestro custom hook\n    const [state, actualizarState] = useState(stateInicial)\n\n    const selectMoneda = () => {\n        return (\n            <Fragment>\n                <Label>{label}</Label>\n                <Select\n                    onChange={e => actualizarState(e.target.value)}\n                    value={state}\n                >\n                <option key=\"\" value=\"\">Seleccione</option>\n\n                    {opciones.map(opcion => {\n                         return <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\n                    })}\n                   \n                </Select>\n            </Fragment>\n        )\n    }\n    //retornar state, interfaz (selectMoneda) y funcion que actualiza el state \n    //el orden no es importante\n    return [state, selectMoneda, actualizarState]\n}\n\nexport default useMoneda","import React, { Fragment, useState } from 'react'\nimport styled from '@emotion/styled'\n\n\nconst Label = styled.label`\n    font-family: 'Bebas neue', cursive;\n    color: #FFF;\n    text-transform: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display:block;\n`\n\nconst Select = styled.select`\n    width: 100%;\n    display:block;\n    padding: 1rem;\n    -webkit-appearence: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.8rem;\n`\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n\n    //State de nuestro custom hook\n    const [state, actualizarState] = useState(stateInicial)\n\n    const selectCriptomoneda = () => {\n\n        return (\n            <Fragment>\n                <Label>{label}</Label>\n                <Select\n                    onChange={e => actualizarState(e.target.value)}\n                    value={state}\n                >\n                     <option key=\"\" value=\"\">Seleccione</option>\n                    {opciones.map(opcion => {\n                         return <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\n                        })\n                    }  \n                </Select>\n            </Fragment>\n        )\n    }\n    //retornar state, interfaz (selectCriptomoneda) y funcion que actualiza el state \n    //el orden no es importante\n    return [state, selectCriptomoneda, actualizarState]\n}\n\nexport default useCriptomoneda","import React from 'react'\nimport styled from '@emotion/styled'\n\nconst MensajeError = styled.p`\n    background-color: #B7322C;\n    padding: 1rem;\n    color: #FFF;\n    font-size: 30px;\n    text-transform: uppercase;\n    font-weight: bold;\n    text-align: center;\n    font-family: 'Bebas Neue', cursive;\n`\n\nconst Error = ({mensaje}) => {\n    return ( <MensajeError>{mensaje}</MensajeError> );\n}\n \nexport default Error;","import React, {useEffect, useState} from 'react';\nimport styled from '@emotion/styled'\nimport useMoneda from '../hooks/useMoneda'\nimport useCriptomoneda from '../hooks/useCriptomoneda'\nimport axios from 'axios';\nimport Error from './Error'\n\nconst Boton = styled.input`\n    margin-top: 20px;\n    font-weight: bold;\n    font-size: 20px;\n    padding: 10px;\n    background-color: #66A2FE;\n    border: none;\n    width: 100%;\n    border-radius: 10px;\n    color: #FFF;\n    transition: background-color .3s ease;\n\n    &:hover{\n        background-color: #326AC0;\n        cursor: pointer; \n    }\n`\n\nconst Formulario = ({guardarMoneda,guardarCriptomoneda, guardarCotizacion}) => {\n\n    const [criptomonedas, setCriptomonedas] = useState([])\n\n    const monedas = [\n        {codigo: 'USD', nombre: 'Dolar EEUU'},\n        {codigo: 'EUR', nombre: 'Euro'},\n        {codigo: 'MXN', nombre: 'Peso Mexicano'},\n        {codigo: 'CLP', nombre: 'Peso Chileno'}\n    ]\n\n    const [moneda, SelectMoneda] = useMoneda('Elige tu moneda', '', monedas)\n\n    const [criptomoneda, SelectCriptomoneda] = useCriptomoneda('Elige tu criptomoneda', '', criptomonedas)\n\n    const [error, guardarError] = useState(false)\n\n    //Ejecutar llamado a la API cuando la aplicaciÃ³n se inicia\n    useEffect(() =>{\n        const consultarAPI = async () => {\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD'\n            const resultado = await axios.get(url) \n            setCriptomonedas(resultado.data.Data)\n        }\n        consultarAPI();\n    },[])\n\n    //Usuario hace submit\n    const cotizarMoneda = e => {\n        e.preventDefault()\n\n        if(moneda.trim() === '' || criptomoneda.trim() === ''){\n            guardarCotizacion({})\n            guardarError(true)\n            return\n        }\n\n        guardarError(false)\n        //pasa los resultados al componente principal.\n        guardarMoneda(moneda)\n        guardarCriptomoneda(criptomoneda)\n\n    }\n   \n    return ( \n       \n        <form\n            onSubmit={cotizarMoneda}\n        >   \n            {error ? <Error mensaje='Todos los campos son obligatorios' /> : null}\n            <SelectMoneda />\n            <SelectCriptomoneda />\n            <Boton \n                type=\"submit\"\n                value=\"Calcular\"\n            />\n        </form> \n    );\n}\n \nexport default Formulario;","import React from 'react'\nimport styled from '@emotion/styled'\n\n\nconst ResultadoDiv = styled.div`\n    color : #FFF;\n    font-family: Arial, Helvetica, sans-serif;\n`\nconst Info = styled.p`\n    font-size: 18px;\n\n    span {\n        font-weight: bold;\n    }\n`\n\nconst Precio = styled.p`\n    font-size: 30px;\n`\n\nconst Cotizacion = ({cotizacion}) => {\n\n    if(Object.keys(cotizacion).length === 0) return null;\n\n    return (<ResultadoDiv>\n              <Precio>El precio es: <span>{cotizacion.PRICE}</span></Precio>\n              <Info>El precio mas alto del dia: <span>{cotizacion.HIGHDAY}</span></Info>\n              <Info>El precio mas bajo del dia: <span>{cotizacion.LOWDAY}</span></Info>\n              <Info>VariaciÃ³n Ãºltimas 24hrs : <span>{cotizacion.CHANGEPCT24HOUR}</span></Info>\n              <Info>Ãltima ActualizaciÃ³n: <span>{cotizacion.LASTUPDATE}</span></Info>\n\n            </ResultadoDiv>)\n}\n \nexport default Cotizacion;","import React from 'react'\nimport '../spinner.css'\n\nconst Spinner = () => {\n    return ( <div className=\"spinner\"></div>  );\n}\n \nexport default Spinner","import React, {useState, useEffect} from 'react'\nimport styled from '@emotion/styled'\nimport imagen from './cryptomonedas.png'\nimport Formulario from './components/Formulario'\nimport Cotizacion from './components/Cotizacion'\nimport Spinner from './components/Spinner'\nimport axios from 'axios'\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n  &::after{\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display: block;\n  }\n`\n\nfunction App() {\n\n  const [moneda, guardarMoneda] = useState('')\n  const [criptomoneda, guardarCriptomoneda] = useState('')\n  const [cotizacion, guardarCotizacion] = useState({})\n  const [cargando, guardarCargando] = useState(false)\n\n  useEffect( () => {\n    \n    if(moneda === '' || criptomoneda === ''){\n        return\n    }\n\n    const cotizarCriptomoneda = async() =>{\n        const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`\n       \n        const resultado = await axios.get(url) \n\n        //muestra el spinner\n        guardarCargando(true)\n\n        setTimeout(() => {\n          //oculta el spinner y muestra el resultado de la cotizacion\n          guardarCargando(false)\n          guardarCotizacion(resultado.data.DISPLAY[criptomoneda][moneda])\n        }, 3000)\n        \n    }\n    cotizarCriptomoneda()\n\n  }, [moneda, criptomoneda])\n\n  const componente = (cargando ? <Spinner />  : <Cotizacion cotizacion= {cotizacion} />)\n\n  return (\n   <Contenedor>\n     <div>\n       <Imagen \n          src={imagen} \n          alt=\"Imagen cripto\"\n        />\n     </div>\n     <div>\n        <Heading>Cotiza Criptomonedas al instante</Heading>\n        <Formulario \n          guardarMoneda = {guardarMoneda} \n          guardarCriptomoneda = {guardarCriptomoneda}\n          guardarCotizacion = {guardarCotizacion}\n        />\n\n        {componente}\n        \n        \n     </div>\n   </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}